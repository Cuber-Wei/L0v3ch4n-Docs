import{_ as t,c as i,a,o as s}from"./app-mXHhDMsf.js";const n={};function r(l,e){return s(),i("div",null,e[0]||(e[0]=[a('<p>addEventListener() 方法是添加事件监听器的标准方式，它允许我们对 DOM 元素的特定事件进行响应。</p><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h2><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">element</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">addEventListener</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">event</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> func</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> useCapture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>event：一个字符串，表示要监听的事件类型（如 &quot;click&quot;、&quot;mouseover&quot; 等）。</li><li>function：当事件发生时要执行的函数（也称为回调函数）。</li><li>useCapture：一个可选的布尔值，指示是否在捕获阶段调用事件处理程序。默认为 false，表示在冒泡阶段调用。</li></ul><h2 id="常见事件类型" tabindex="-1"><a class="header-anchor" href="#常见事件类型"><span>常见事件类型</span></a></h2><ol><li>点击事件(click)</li><li>鼠标悬停事件(mouseover)</li><li>鼠标移出时间(mouseout)</li><li>键盘按下事件(keydown)</li><li>表单提交事件(submit)</li></ol><h2 id="移除事件监听器" tabindex="-1"><a class="header-anchor" href="#移除事件监听器"><span>移除事件监听器</span></a></h2><p>如果需要移除已添加的事件监听器，可以使用 removeEventListener() 方法。注意，移除事件监听器时，必须传入相同的事件类型和函数引用。</p>',8)]))}const p=t(n,[["render",r]]),h=JSON.parse('{"path":"/interview/EventListener/","title":"事件监听","lang":"zh-CN","frontmatter":{"title":"事件监听","createTime":"2025/03/14 17:18:11","permalink":"/interview/EventListener/","description":"addEventListener() 方法是添加事件监听器的标准方式，它允许我们对 DOM 元素的特定事件进行响应。 基本用法 event：一个字符串，表示要监听的事件类型（如 \\"click\\"、\\"mouseover\\" 等）。 function：当事件发生时要执行的函数（也称为回调函数）。 useCapture：一个可选的布尔值，指示是否在捕获阶段调用事...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事件监听\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-18T03:40:38.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://blog.l0v3ch4n.top/interview/EventListener/"}],["meta",{"property":"og:site_name","content":"L0v3ch4n"}],["meta",{"property":"og:title","content":"事件监听"}],["meta",{"property":"og:description","content":"addEventListener() 方法是添加事件监听器的标准方式，它允许我们对 DOM 元素的特定事件进行响应。 基本用法 event：一个字符串，表示要监听的事件类型（如 \\"click\\"、\\"mouseover\\" 等）。 function：当事件发生时要执行的函数（也称为回调函数）。 useCapture：一个可选的布尔值，指示是否在捕获阶段调用事..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-18T03:40:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-18T03:40:38.000Z"}]]},"readingTime":{"minutes":0.78,"words":233},"git":{"createdTime":1742269238000,"updatedTime":1742269238000,"contributors":[{"name":"L0v3ch4n","username":"L0v3ch4n","email":"cuberwei0@163.com","commits":1,"avatar":"https://avatars.githubusercontent.com/L0v3ch4n?v=4","url":"https://github.com/L0v3ch4n"}]},"autoDesc":true,"filePathRelative":"notes/interview/JavaScript/13-事件监听.md","headers":[]}');export{p as comp,h as data};
